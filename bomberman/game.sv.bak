module game (input Reset, frame_clk,
				input [7:0]   keycode,
				output [299:0] map_1d,
				output logic over
				);
//enum logic [2:0] {EMPTY, WALL, BRICK, BOMB, WAVE, MONSTER} object;
enum logic [2:0] {up, down, left, right, set_bomb} command;

// Registers
logic [2:0] map[9:0][9:0];
logic [9:0] playerX, playerY;

// Wire
logic [3:0] mapX, mapY; 
logic [9:0] next_mapX, next_mapY;
logic [7:0] UP, DOWN, LEFT, RIGHT, RELEASE;
logic enabled;

parameter xSpeed = 4'd16;
parameter ySpeed = 4'd12; 
parameter [7:0] SPACE = 8'hC;		// Space 
parameter [7:0] A_UP = 8'h52;			 // Arrow up
parameter [7:0] A_DOWN = 8'h51;		 // Arrow down
parameter [7:0] A_LEFT = 8'h50;		 // Arrow left
parameter [7:0] A_RIGHT = 8'h4F;		 // Arrow rigt
	  
	  
assign mapX = playerX / 10'd64;
assign mapY = playerY / 10'd48;
assign UP = A_UP;
assign DOWN = A_DOWN;
assign LEFT = A_LEFT;
assign RIGHT = A_RIGHT;
assign RELEASE = SPACE;

always_ff @ (posedge Reset or posedge frame_clk)
begin

	if(Reset) begin
		map[0] <= '{3'd1, 3'd1, 3'd1, 3'd1, 3'd1, 3'd1, 3'd1, 3'd1,3'd1, 3'd1};
		map[1] <= '{3'd1, 3'd0, 3'd0, 3'd2, 3'd2, 3'd0, 3'd0, 3'd0,3'd0, 3'd1};
		map[2] <= '{3'd1, 3'd0, 3'd1, 3'd1, 3'd0, 3'd0, 3'd1, 3'd1,3'd0, 3'd1};
		map[3] <= '{3'd1, 3'd2, 3'd1, 3'd1, 3'd0, 3'd0, 3'd1, 3'd1,3'd0, 3'd1};
		map[4] <= '{3'd1, 3'd2, 3'd0, 3'd0, 3'd0, 3'd0, 3'd0, 3'd0,3'd0, 3'd1};
		map[5] <= '{3'd1, 3'd2, 3'd0, 3'd0, 3'd0, 3'd0, 3'd0, 3'd0,3'd0, 3'd1};
		map[6] <= '{3'd1, 3'd2, 3'd1, 3'd1, 3'd0, 3'd0, 3'd1, 3'd1,3'd0, 3'd1};
		map[7] <= '{3'd1, 3'd0, 3'd1, 3'd1, 3'd0, 3'd0, 3'd1, 3'd1,3'd0, 3'd1};
		map[8] <= '{3'd1, 3'd0, 3'd0, 3'd2, 3'd2, 3'd0, 3'd0, 3'd0,3'd0, 3'd1};
		map[9] <= '{3'd1, 3'd1, 3'd1, 3'd1, 3'd1, 3'd1, 3'd1, 3'd1,3'd1, 3'd1};
	
	end
	
	else begin
		// check death
		if (map[mapX][mapY] == 3'd4 || map[mapX][mapY] == 3'd5) begin
			over = 1'd1;
		end
		// Update command
		unique case(keycode)
			UP: begin
				next_mapX <= mapX;
				next_mapY <= (playerY - ySpeed) / 10'd48;
				command <= up;
			end
			
			DOWN: begin									
				next_mapX <= mapX;
				next_mapY <= (playerY + ySpeed) / 10'd48;
				command <= down;
			end
			
			LEFT: begin									
				next_mapX <= (playerX - xSpeed) / 10'd64;
				next_mapY <= mapY;
				command <= left;
			end
			
			RIGHT: begin								
				next_mapX <= (playerX + xSpeed) / 10'd64;
				next_mapY <= mapY;
				command <= right;
			end
			RELEASE: begin
				next_mapX <= mapX;
				next_mapY <= mapY;
				command <= set_bomb;
			end	
			default: begin
				next_mapX <= mapX;
				next_mapY <= mapY;
				command <= left;
				enabled <= 1'd0;
			end
		endcase
		// Collision detection
		if (map[next_mapX][next_mapY] <= 3'd3 && map[next_mapX][next_mapY] != 3'd0) begin
			enabled <= 1'd0;
		end
		
		// Update map
		map <= map;
	end
end	

	
 player player1(.Reset(Reset),
					 .frame_clk(frame_clk),
					 .command(command),
					 .enabled(enabled),
					 .xSpeed(xSpeed),
					 .ySpeed(ySpeed),
					 .playerX(playerX), .playerY(playerY));

assign map_1d = { map[0][0], map[0][1], map[0][2], map[0][3], map[0][4], map[0][5], map[0][6], map[0][7], map[0][8], map[0][9],
						map[1][0], map[1][1], map[1][2], map[1][3], map[1][4], map[1][5], map[1][6], map[1][7], map[1][8], map[1][9],
						map[2][0], map[2][1], map[2][2], map[2][3], map[2][4], map[2][5], map[2][6], map[2][7], map[2][8], map[2][9],
						map[3][0], map[3][1], map[3][2], map[3][3], map[3][4], map[3][5], map[3][6], map[3][7], map[3][8], map[3][9],
						map[4][0], map[4][1], map[4][2], map[4][3], map[4][4], map[4][5], map[4][6], map[4][7], map[4][8], map[4][9],
						map[5][0], map[5][1], map[5][2], map[5][3], map[5][4], map[5][5], map[5][6], map[5][7], map[5][8], map[5][9],
						map[6][0], map[6][1], map[6][2], map[6][3], map[6][4], map[6][5], map[6][6], map[6][7], map[6][8], map[6][9],
						map[7][0], map[7][1], map[7][2], map[7][3], map[7][4], map[7][5], map[7][6], map[7][7], map[7][8], map[7][9],
						map[8][0], map[8][1], map[8][2], map[8][3], map[8][4], map[8][5], map[8][6], map[8][7], map[8][8], map[8][9],
						map[9][0], map[9][1], map[9][2], map[9][3], map[9][4], map[9][5], map[9][6], map[9][7], map[9][8], map[9][9],
						};
							  
endmodule